// Generated by CoffeeScript 1.6.2
(function() {
  var app, async, http, should, _;

  _ = require("underscore");

  should = require("should");

  async = require("async");

  app = require("../app");

  http = require("../test/support/http");

  describe('REST-rsmq Test', function() {
    var m1, m2, q1;

    before(function(done) {
      http.createServer(app, done);
    });
    after(function(done) {
      done();
    });
    q1 = "mytestQueue";
    m1 = null;
    m2 = null;
    it('POST /queue/mytestQueue should return 200 and create the queue', function(done) {
      http.request().post('/queue/' + q1).set('Content-Type', 'application/json').write(JSON.stringify({
        vt: 20,
        maxsize: 2048
      })).end(function(resp) {
        var body;

        resp.statusCode.should.equal(200);
        body = JSON.parse(resp.body);
        body.result.should.equal(1);
        return done();
      });
      return;
    });
    it('POST /message/mytestQueue should return 200 and send message 1', function(done) {
      http.request().post('/message/' + q1).set('Content-Type', 'application/json').write(JSON.stringify({
        message: "Hello World!"
      })).end(function(resp) {
        var body;

        resp.statusCode.should.equal(200);
        body = JSON.parse(resp.body);
        body.id.length.should.equal(42);
        m1 = body.id;
        return done();
      });
      return;
    });
    it('POST /message/mytestQueue should return 200 and send message 2', function(done) {
      http.request().post('/message/' + q1).set('Content-Type', 'application/json').write(JSON.stringify({
        message: "Foo"
      })).end(function(resp) {
        var body;

        resp.statusCode.should.equal(200);
        body = JSON.parse(resp.body);
        body.id.length.should.equal(42);
        m2 = body.id;
        return done();
      });
      return;
    });
    it('GET /message/mytestQueue should return message 1', function(done) {
      http.request().get('/message/' + q1).end(function(resp) {
        var body;

        resp.statusCode.should.equal(200);
        body = JSON.parse(resp.body);
        body.id.should.equal(m1);
        done();
      });
    });
    it('GET /message/mytestQueue should return message 2', function(done) {
      http.request().get('/message/' + q1).end(function(resp) {
        var body;

        resp.statusCode.should.equal(200);
        body = JSON.parse(resp.body);
        body.id.should.equal(m2);
        done();
      });
    });
    it('GET /message/mytestQueue should not return a message', function(done) {
      http.request().get('/message/' + q1).end(function(resp) {
        var body;

        resp.statusCode.should.equal(200);
        body = JSON.parse(resp.body);
        should.not.exist(body.id);
        done();
      });
    });
    it('DELETE /message/mytestQueue/:message1 should delete message 1', function(done) {
      http.request()["delete"]('/message/' + q1 + '/' + m1).end(function(resp) {
        var body;

        resp.statusCode.should.equal(200);
        body = JSON.parse(resp.body);
        body.result.should.equal(1);
        done();
      });
    });
    it('DELETE /message/mytestQueue/:message1 should fail', function(done) {
      http.request()["delete"]('/message/' + q1 + '/' + m1).end(function(resp) {
        var body;

        resp.statusCode.should.equal(200);
        body = JSON.parse(resp.body);
        body.result.should.equal(0);
        done();
      });
    });
    it('DELETE /message/mytestQueue/:message2 should delete message 2', function(done) {
      http.request()["delete"]('/message/' + q1 + '/' + m2).end(function(resp) {
        var body;

        resp.statusCode.should.equal(200);
        body = JSON.parse(resp.body);
        body.result.should.equal(1);
        done();
      });
    });
    it('DELETE /queue/mytestQueue should return 200 ', function(done) {
      http.request()["delete"]('/queue/' + q1).expect(200, done);
    });
  });

}).call(this);
